#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DashPetApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DashPet")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnimalClass(AnimalClass instance);
    partial void UpdateAnimalClass(AnimalClass instance);
    partial void DeleteAnimalClass(AnimalClass instance);
    partial void InsertAnimalSpecies(AnimalSpecies instance);
    partial void UpdateAnimalSpecies(AnimalSpecies instance);
    partial void DeleteAnimalSpecies(AnimalSpecies instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertOwner(Owner instance);
    partial void UpdateOwner(Owner instance);
    partial void DeleteOwner(Owner instance);
    partial void InsertPet(Pet instance);
    partial void UpdatePet(Pet instance);
    partial void DeletePet(Pet instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertTimeSlot(TimeSlot instance);
    partial void UpdateTimeSlot(TimeSlot instance);
    partial void DeleteTimeSlot(TimeSlot instance);
    partial void InsertVet(Vet instance);
    partial void UpdateVet(Vet instance);
    partial void DeleteVet(Vet instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::DashPetApp.Properties.Settings.Default.DashPetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AnimalClass> AnimalClasses
		{
			get
			{
				return this.GetTable<AnimalClass>();
			}
		}
		
		public System.Data.Linq.Table<AnimalSpecies> AnimalSpecies
		{
			get
			{
				return this.GetTable<AnimalSpecies>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<Pet> Pets
		{
			get
			{
				return this.GetTable<Pet>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<TimeSlot> TimeSlots
		{
			get
			{
				return this.GetTable<TimeSlot>();
			}
		}
		
		public System.Data.Linq.Table<Vet> Vets
		{
			get
			{
				return this.GetTable<Vet>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimalClass")]
	public partial class AnimalClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _animalclass_id;
		
		private string _animalclass_name;
		
		private EntitySet<AnimalSpecies> _AnimalSpecies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onanimalclass_idChanging(int value);
    partial void Onanimalclass_idChanged();
    partial void Onanimalclass_nameChanging(string value);
    partial void Onanimalclass_nameChanged();
    #endregion
		
		public AnimalClass()
		{
			this._AnimalSpecies = new EntitySet<AnimalSpecies>(new Action<AnimalSpecies>(this.attach_AnimalSpecies), new Action<AnimalSpecies>(this.detach_AnimalSpecies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalclass_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int animalclass_id
		{
			get
			{
				return this._animalclass_id;
			}
			set
			{
				if ((this._animalclass_id != value))
				{
					this.Onanimalclass_idChanging(value);
					this.SendPropertyChanging();
					this._animalclass_id = value;
					this.SendPropertyChanged("animalclass_id");
					this.Onanimalclass_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalclass_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string animalclass_name
		{
			get
			{
				return this._animalclass_name;
			}
			set
			{
				if ((this._animalclass_name != value))
				{
					this.Onanimalclass_nameChanging(value);
					this.SendPropertyChanging();
					this._animalclass_name = value;
					this.SendPropertyChanged("animalclass_name");
					this.Onanimalclass_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalClass_AnimalSpecies", Storage="_AnimalSpecies", ThisKey="animalclass_id", OtherKey="animalspecies_animalclass_id")]
		public EntitySet<AnimalSpecies> AnimalSpecies
		{
			get
			{
				return this._AnimalSpecies;
			}
			set
			{
				this._AnimalSpecies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnimalSpecies(AnimalSpecies entity)
		{
			this.SendPropertyChanging();
			entity.AnimalClass = this;
		}
		
		private void detach_AnimalSpecies(AnimalSpecies entity)
		{
			this.SendPropertyChanging();
			entity.AnimalClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnimalSpecies")]
	public partial class AnimalSpecies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _animalspecies_id;
		
		private string _animalspecies_name;
		
		private int _animalspecies_animalclass_id;
		
		private EntitySet<Pet> _Pets;
		
		private EntityRef<AnimalClass> _AnimalClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onanimalspecies_idChanging(int value);
    partial void Onanimalspecies_idChanged();
    partial void Onanimalspecies_nameChanging(string value);
    partial void Onanimalspecies_nameChanged();
    partial void Onanimalspecies_animalclass_idChanging(int value);
    partial void Onanimalspecies_animalclass_idChanged();
    #endregion
		
		public AnimalSpecies()
		{
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			this._AnimalClass = default(EntityRef<AnimalClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalspecies_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int animalspecies_id
		{
			get
			{
				return this._animalspecies_id;
			}
			set
			{
				if ((this._animalspecies_id != value))
				{
					this.Onanimalspecies_idChanging(value);
					this.SendPropertyChanging();
					this._animalspecies_id = value;
					this.SendPropertyChanged("animalspecies_id");
					this.Onanimalspecies_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalspecies_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string animalspecies_name
		{
			get
			{
				return this._animalspecies_name;
			}
			set
			{
				if ((this._animalspecies_name != value))
				{
					this.Onanimalspecies_nameChanging(value);
					this.SendPropertyChanging();
					this._animalspecies_name = value;
					this.SendPropertyChanged("animalspecies_name");
					this.Onanimalspecies_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalspecies_animalclass_id", DbType="Int NOT NULL")]
		public int animalspecies_animalclass_id
		{
			get
			{
				return this._animalspecies_animalclass_id;
			}
			set
			{
				if ((this._animalspecies_animalclass_id != value))
				{
					if (this._AnimalClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onanimalspecies_animalclass_idChanging(value);
					this.SendPropertyChanging();
					this._animalspecies_animalclass_id = value;
					this.SendPropertyChanged("animalspecies_animalclass_id");
					this.Onanimalspecies_animalclass_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalSpecies_Pet", Storage="_Pets", ThisKey="animalspecies_id", OtherKey="pet_animalspecies_id")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalClass_AnimalSpecies", Storage="_AnimalClass", ThisKey="animalspecies_animalclass_id", OtherKey="animalclass_id", IsForeignKey=true)]
		public AnimalClass AnimalClass
		{
			get
			{
				return this._AnimalClass.Entity;
			}
			set
			{
				AnimalClass previousValue = this._AnimalClass.Entity;
				if (((previousValue != value) 
							|| (this._AnimalClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimalClass.Entity = null;
						previousValue.AnimalSpecies.Remove(this);
					}
					this._AnimalClass.Entity = value;
					if ((value != null))
					{
						value.AnimalSpecies.Add(this);
						this._animalspecies_animalclass_id = value.animalclass_id;
					}
					else
					{
						this._animalspecies_animalclass_id = default(int);
					}
					this.SendPropertyChanged("AnimalClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.AnimalSpecies = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.AnimalSpecies = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _appt_id;
		
		private int _appt_pet_id;
		
		private int _appt_vet_id;
		
		private System.DateTime _appt_date;
		
		private int _appt_timeslot_id;
		
		private int _appt_service_id;
		
		private string _appt_notes;
		
		private bool _appt_status;
		
		private EntityRef<Pet> _Pet;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<TimeSlot> _TimeSlot;
		
		private EntityRef<Vet> _Vet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onappt_idChanging(int value);
    partial void Onappt_idChanged();
    partial void Onappt_pet_idChanging(int value);
    partial void Onappt_pet_idChanged();
    partial void Onappt_vet_idChanging(int value);
    partial void Onappt_vet_idChanged();
    partial void Onappt_dateChanging(System.DateTime value);
    partial void Onappt_dateChanged();
    partial void Onappt_timeslot_idChanging(int value);
    partial void Onappt_timeslot_idChanged();
    partial void Onappt_service_idChanging(int value);
    partial void Onappt_service_idChanged();
    partial void Onappt_notesChanging(string value);
    partial void Onappt_notesChanged();
    partial void Onappt_statusChanging(bool value);
    partial void Onappt_statusChanged();
    #endregion
		
		public Appointment()
		{
			this._Pet = default(EntityRef<Pet>);
			this._Service = default(EntityRef<Service>);
			this._TimeSlot = default(EntityRef<TimeSlot>);
			this._Vet = default(EntityRef<Vet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int appt_id
		{
			get
			{
				return this._appt_id;
			}
			set
			{
				if ((this._appt_id != value))
				{
					this.Onappt_idChanging(value);
					this.SendPropertyChanging();
					this._appt_id = value;
					this.SendPropertyChanged("appt_id");
					this.Onappt_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_pet_id", DbType="Int NOT NULL")]
		public int appt_pet_id
		{
			get
			{
				return this._appt_pet_id;
			}
			set
			{
				if ((this._appt_pet_id != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onappt_pet_idChanging(value);
					this.SendPropertyChanging();
					this._appt_pet_id = value;
					this.SendPropertyChanged("appt_pet_id");
					this.Onappt_pet_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_vet_id", DbType="Int NOT NULL")]
		public int appt_vet_id
		{
			get
			{
				return this._appt_vet_id;
			}
			set
			{
				if ((this._appt_vet_id != value))
				{
					if (this._Vet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onappt_vet_idChanging(value);
					this.SendPropertyChanging();
					this._appt_vet_id = value;
					this.SendPropertyChanged("appt_vet_id");
					this.Onappt_vet_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_date", DbType="Date NOT NULL")]
		public System.DateTime appt_date
		{
			get
			{
				return this._appt_date;
			}
			set
			{
				if ((this._appt_date != value))
				{
					this.Onappt_dateChanging(value);
					this.SendPropertyChanging();
					this._appt_date = value;
					this.SendPropertyChanged("appt_date");
					this.Onappt_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_timeslot_id", DbType="Int NOT NULL")]
		public int appt_timeslot_id
		{
			get
			{
				return this._appt_timeslot_id;
			}
			set
			{
				if ((this._appt_timeslot_id != value))
				{
					if (this._TimeSlot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onappt_timeslot_idChanging(value);
					this.SendPropertyChanging();
					this._appt_timeslot_id = value;
					this.SendPropertyChanged("appt_timeslot_id");
					this.Onappt_timeslot_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_service_id", DbType="Int NOT NULL")]
		public int appt_service_id
		{
			get
			{
				return this._appt_service_id;
			}
			set
			{
				if ((this._appt_service_id != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onappt_service_idChanging(value);
					this.SendPropertyChanging();
					this._appt_service_id = value;
					this.SendPropertyChanged("appt_service_id");
					this.Onappt_service_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_notes", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string appt_notes
		{
			get
			{
				return this._appt_notes;
			}
			set
			{
				if ((this._appt_notes != value))
				{
					this.Onappt_notesChanging(value);
					this.SendPropertyChanging();
					this._appt_notes = value;
					this.SendPropertyChanged("appt_notes");
					this.Onappt_notesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_appt_status", DbType="Bit NOT NULL")]
		public bool appt_status
		{
			get
			{
				return this._appt_status;
			}
			set
			{
				if ((this._appt_status != value))
				{
					this.Onappt_statusChanging(value);
					this.SendPropertyChanging();
					this._appt_status = value;
					this.SendPropertyChanged("appt_status");
					this.Onappt_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Appointment", Storage="_Pet", ThisKey="appt_pet_id", OtherKey="pet_id", IsForeignKey=true)]
		public Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._appt_pet_id = value.pet_id;
					}
					else
					{
						this._appt_pet_id = default(int);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Appointment", Storage="_Service", ThisKey="appt_service_id", OtherKey="service_id", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._appt_service_id = value.service_id;
					}
					else
					{
						this._appt_service_id = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSlot_Appointment", Storage="_TimeSlot", ThisKey="appt_timeslot_id", OtherKey="timeslot_id", IsForeignKey=true)]
		public TimeSlot TimeSlot
		{
			get
			{
				return this._TimeSlot.Entity;
			}
			set
			{
				TimeSlot previousValue = this._TimeSlot.Entity;
				if (((previousValue != value) 
							|| (this._TimeSlot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeSlot.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._TimeSlot.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._appt_timeslot_id = value.timeslot_id;
					}
					else
					{
						this._appt_timeslot_id = default(int);
					}
					this.SendPropertyChanged("TimeSlot");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_Appointment", Storage="_Vet", ThisKey="appt_vet_id", OtherKey="vet_id", IsForeignKey=true)]
		public Vet Vet
		{
			get
			{
				return this._Vet.Entity;
			}
			set
			{
				Vet previousValue = this._Vet.Entity;
				if (((previousValue != value) 
							|| (this._Vet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vet.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Vet.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._appt_vet_id = value.vet_id;
					}
					else
					{
						this._appt_vet_id = default(int);
					}
					this.SendPropertyChanged("Vet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owner")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _owner_id;
		
		private string _owner_name;
		
		private string _owner_doc;
		
		private string _owner_phone;
		
		private string _owner_address;
		
		private string _owner_email;
		
		private bool _owner_status;
		
		private System.Data.Linq.Binary _owner_timestamp;
		
		private EntitySet<Pet> _Pets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onowner_idChanging(int value);
    partial void Onowner_idChanged();
    partial void Onowner_nameChanging(string value);
    partial void Onowner_nameChanged();
    partial void Onowner_docChanging(string value);
    partial void Onowner_docChanged();
    partial void Onowner_phoneChanging(string value);
    partial void Onowner_phoneChanged();
    partial void Onowner_addressChanging(string value);
    partial void Onowner_addressChanged();
    partial void Onowner_emailChanging(string value);
    partial void Onowner_emailChanged();
    partial void Onowner_statusChanging(bool value);
    partial void Onowner_statusChanged();
    partial void Onowner_timestampChanging(System.Data.Linq.Binary value);
    partial void Onowner_timestampChanged();
    #endregion
		
		public Owner()
		{
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int owner_id
		{
			get
			{
				return this._owner_id;
			}
			set
			{
				if ((this._owner_id != value))
				{
					this.Onowner_idChanging(value);
					this.SendPropertyChanging();
					this._owner_id = value;
					this.SendPropertyChanged("owner_id");
					this.Onowner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_name", DbType="VarChar(300) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string owner_name
		{
			get
			{
				return this._owner_name;
			}
			set
			{
				if ((this._owner_name != value))
				{
					this.Onowner_nameChanging(value);
					this.SendPropertyChanging();
					this._owner_name = value;
					this.SendPropertyChanged("owner_name");
					this.Onowner_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_doc", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string owner_doc
		{
			get
			{
				return this._owner_doc;
			}
			set
			{
				if ((this._owner_doc != value))
				{
					this.Onowner_docChanging(value);
					this.SendPropertyChanging();
					this._owner_doc = value;
					this.SendPropertyChanged("owner_doc");
					this.Onowner_docChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_phone", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string owner_phone
		{
			get
			{
				return this._owner_phone;
			}
			set
			{
				if ((this._owner_phone != value))
				{
					this.Onowner_phoneChanging(value);
					this.SendPropertyChanging();
					this._owner_phone = value;
					this.SendPropertyChanged("owner_phone");
					this.Onowner_phoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_address", DbType="VarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string owner_address
		{
			get
			{
				return this._owner_address;
			}
			set
			{
				if ((this._owner_address != value))
				{
					this.Onowner_addressChanging(value);
					this.SendPropertyChanging();
					this._owner_address = value;
					this.SendPropertyChanged("owner_address");
					this.Onowner_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_email", DbType="VarChar(320) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string owner_email
		{
			get
			{
				return this._owner_email;
			}
			set
			{
				if ((this._owner_email != value))
				{
					this.Onowner_emailChanging(value);
					this.SendPropertyChanging();
					this._owner_email = value;
					this.SendPropertyChanged("owner_email");
					this.Onowner_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_status", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool owner_status
		{
			get
			{
				return this._owner_status;
			}
			set
			{
				if ((this._owner_status != value))
				{
					this.Onowner_statusChanging(value);
					this.SendPropertyChanging();
					this._owner_status = value;
					this.SendPropertyChanged("owner_status");
					this.Onowner_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_owner_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary owner_timestamp
		{
			get
			{
				return this._owner_timestamp;
			}
			set
			{
				if ((this._owner_timestamp != value))
				{
					this.Onowner_timestampChanging(value);
					this.SendPropertyChanging();
					this._owner_timestamp = value;
					this.SendPropertyChanged("owner_timestamp");
					this.Onowner_timestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Pet", Storage="_Pets", ThisKey="owner_id", OtherKey="pet_owner_id")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pet")]
	public partial class Pet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pet_id;
		
		private int _pet_owner_id;
		
		private string _pet_name;
		
		private int _pet_animalspecies_id;
		
		private System.DateTime _pet_dob;
		
		private string _pet_weight;
		
		private string _pet_sex;
		
		private string _pet_notes;
		
		private bool _pet_status;
		
		private System.Data.Linq.Binary _pet_timestamp;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntityRef<AnimalSpecies> _AnimalSpecies;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpet_idChanging(int value);
    partial void Onpet_idChanged();
    partial void Onpet_owner_idChanging(int value);
    partial void Onpet_owner_idChanged();
    partial void Onpet_nameChanging(string value);
    partial void Onpet_nameChanged();
    partial void Onpet_animalspecies_idChanging(int value);
    partial void Onpet_animalspecies_idChanged();
    partial void Onpet_dobChanging(System.DateTime value);
    partial void Onpet_dobChanged();
    partial void Onpet_weightChanging(string value);
    partial void Onpet_weightChanged();
    partial void Onpet_sexChanging(string value);
    partial void Onpet_sexChanged();
    partial void Onpet_notesChanging(string value);
    partial void Onpet_notesChanged();
    partial void Onpet_statusChanging(bool value);
    partial void Onpet_statusChanged();
    partial void Onpet_timestampChanging(System.Data.Linq.Binary value);
    partial void Onpet_timestampChanged();
    #endregion
		
		public Pet()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._AnimalSpecies = default(EntityRef<AnimalSpecies>);
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int pet_id
		{
			get
			{
				return this._pet_id;
			}
			set
			{
				if ((this._pet_id != value))
				{
					this.Onpet_idChanging(value);
					this.SendPropertyChanging();
					this._pet_id = value;
					this.SendPropertyChanged("pet_id");
					this.Onpet_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_owner_id", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int pet_owner_id
		{
			get
			{
				return this._pet_owner_id;
			}
			set
			{
				if ((this._pet_owner_id != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpet_owner_idChanging(value);
					this.SendPropertyChanging();
					this._pet_owner_id = value;
					this.SendPropertyChanged("pet_owner_id");
					this.Onpet_owner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_name", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string pet_name
		{
			get
			{
				return this._pet_name;
			}
			set
			{
				if ((this._pet_name != value))
				{
					this.Onpet_nameChanging(value);
					this.SendPropertyChanging();
					this._pet_name = value;
					this.SendPropertyChanged("pet_name");
					this.Onpet_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_animalspecies_id", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int pet_animalspecies_id
		{
			get
			{
				return this._pet_animalspecies_id;
			}
			set
			{
				if ((this._pet_animalspecies_id != value))
				{
					if (this._AnimalSpecies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpet_animalspecies_idChanging(value);
					this.SendPropertyChanging();
					this._pet_animalspecies_id = value;
					this.SendPropertyChanged("pet_animalspecies_id");
					this.Onpet_animalspecies_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_dob", DbType="Date NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime pet_dob
		{
			get
			{
				return this._pet_dob;
			}
			set
			{
				if ((this._pet_dob != value))
				{
					this.Onpet_dobChanging(value);
					this.SendPropertyChanging();
					this._pet_dob = value;
					this.SendPropertyChanged("pet_dob");
					this.Onpet_dobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_weight", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string pet_weight
		{
			get
			{
				return this._pet_weight;
			}
			set
			{
				if ((this._pet_weight != value))
				{
					this.Onpet_weightChanging(value);
					this.SendPropertyChanging();
					this._pet_weight = value;
					this.SendPropertyChanged("pet_weight");
					this.Onpet_weightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_sex", DbType="VarChar(3) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string pet_sex
		{
			get
			{
				return this._pet_sex;
			}
			set
			{
				if ((this._pet_sex != value))
				{
					this.Onpet_sexChanging(value);
					this.SendPropertyChanging();
					this._pet_sex = value;
					this.SendPropertyChanged("pet_sex");
					this.Onpet_sexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_notes", DbType="VarChar(1000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string pet_notes
		{
			get
			{
				return this._pet_notes;
			}
			set
			{
				if ((this._pet_notes != value))
				{
					this.Onpet_notesChanging(value);
					this.SendPropertyChanging();
					this._pet_notes = value;
					this.SendPropertyChanged("pet_notes");
					this.Onpet_notesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_status", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool pet_status
		{
			get
			{
				return this._pet_status;
			}
			set
			{
				if ((this._pet_status != value))
				{
					this.Onpet_statusChanging(value);
					this.SendPropertyChanging();
					this._pet_status = value;
					this.SendPropertyChanged("pet_status");
					this.Onpet_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pet_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary pet_timestamp
		{
			get
			{
				return this._pet_timestamp;
			}
			set
			{
				if ((this._pet_timestamp != value))
				{
					this.Onpet_timestampChanging(value);
					this.SendPropertyChanging();
					this._pet_timestamp = value;
					this.SendPropertyChanged("pet_timestamp");
					this.Onpet_timestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Appointment", Storage="_Appointments", ThisKey="pet_id", OtherKey="appt_pet_id")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnimalSpecies_Pet", Storage="_AnimalSpecies", ThisKey="pet_animalspecies_id", OtherKey="animalspecies_id", IsForeignKey=true)]
		public AnimalSpecies AnimalSpecies
		{
			get
			{
				return this._AnimalSpecies.Entity;
			}
			set
			{
				AnimalSpecies previousValue = this._AnimalSpecies.Entity;
				if (((previousValue != value) 
							|| (this._AnimalSpecies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnimalSpecies.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._AnimalSpecies.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._pet_animalspecies_id = value.animalspecies_id;
					}
					else
					{
						this._pet_animalspecies_id = default(int);
					}
					this.SendPropertyChanged("AnimalSpecies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Pet", Storage="_Owner", ThisKey="pet_owner_id", OtherKey="owner_id", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._pet_owner_id = value.owner_id;
					}
					else
					{
						this._pet_owner_id = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _room_id;
		
		private string _room_name;
		
		private bool _room_status;
		
		private EntitySet<Vet> _Vets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onroom_idChanging(int value);
    partial void Onroom_idChanged();
    partial void Onroom_nameChanging(string value);
    partial void Onroom_nameChanged();
    partial void Onroom_statusChanging(bool value);
    partial void Onroom_statusChanged();
    #endregion
		
		public Room()
		{
			this._Vets = new EntitySet<Vet>(new Action<Vet>(this.attach_Vets), new Action<Vet>(this.detach_Vets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_room_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int room_id
		{
			get
			{
				return this._room_id;
			}
			set
			{
				if ((this._room_id != value))
				{
					this.Onroom_idChanging(value);
					this.SendPropertyChanging();
					this._room_id = value;
					this.SendPropertyChanged("room_id");
					this.Onroom_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_room_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string room_name
		{
			get
			{
				return this._room_name;
			}
			set
			{
				if ((this._room_name != value))
				{
					this.Onroom_nameChanging(value);
					this.SendPropertyChanging();
					this._room_name = value;
					this.SendPropertyChanged("room_name");
					this.Onroom_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_room_status", DbType="Bit NOT NULL")]
		public bool room_status
		{
			get
			{
				return this._room_status;
			}
			set
			{
				if ((this._room_status != value))
				{
					this.Onroom_statusChanging(value);
					this.SendPropertyChanging();
					this._room_status = value;
					this.SendPropertyChanged("room_status");
					this.Onroom_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Vet", Storage="_Vets", ThisKey="room_id", OtherKey="vet_room_id")]
		public EntitySet<Vet> Vets
		{
			get
			{
				return this._Vets;
			}
			set
			{
				this._Vets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Vets(Vet entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Vets(Vet entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _service_id;
		
		private string _service_name;
		
		private string _service_price;
		
		private bool _service_status;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_idChanging(int value);
    partial void Onservice_idChanged();
    partial void Onservice_nameChanging(string value);
    partial void Onservice_nameChanged();
    partial void Onservice_priceChanging(string value);
    partial void Onservice_priceChanged();
    partial void Onservice_statusChanging(bool value);
    partial void Onservice_statusChanged();
    #endregion
		
		public Service()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int service_id
		{
			get
			{
				return this._service_id;
			}
			set
			{
				if ((this._service_id != value))
				{
					this.Onservice_idChanging(value);
					this.SendPropertyChanging();
					this._service_id = value;
					this.SendPropertyChanged("service_id");
					this.Onservice_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string service_name
		{
			get
			{
				return this._service_name;
			}
			set
			{
				if ((this._service_name != value))
				{
					this.Onservice_nameChanging(value);
					this.SendPropertyChanging();
					this._service_name = value;
					this.SendPropertyChanged("service_name");
					this.Onservice_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_price", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string service_price
		{
			get
			{
				return this._service_price;
			}
			set
			{
				if ((this._service_price != value))
				{
					this.Onservice_priceChanging(value);
					this.SendPropertyChanging();
					this._service_price = value;
					this.SendPropertyChanged("service_price");
					this.Onservice_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_status", DbType="Bit NOT NULL")]
		public bool service_status
		{
			get
			{
				return this._service_status;
			}
			set
			{
				if ((this._service_status != value))
				{
					this.Onservice_statusChanging(value);
					this.SendPropertyChanging();
					this._service_status = value;
					this.SendPropertyChanged("service_status");
					this.Onservice_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Appointment", Storage="_Appointments", ThisKey="service_id", OtherKey="appt_service_id")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeSlot")]
	public partial class TimeSlot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _timeslot_id;
		
		private string _timeslot_time;
		
		private EntitySet<Appointment> _Appointments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontimeslot_idChanging(int value);
    partial void Ontimeslot_idChanged();
    partial void Ontimeslot_timeChanging(string value);
    partial void Ontimeslot_timeChanged();
    #endregion
		
		public TimeSlot()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeslot_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int timeslot_id
		{
			get
			{
				return this._timeslot_id;
			}
			set
			{
				if ((this._timeslot_id != value))
				{
					this.Ontimeslot_idChanging(value);
					this.SendPropertyChanging();
					this._timeslot_id = value;
					this.SendPropertyChanged("timeslot_id");
					this.Ontimeslot_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeslot_time", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string timeslot_time
		{
			get
			{
				return this._timeslot_time;
			}
			set
			{
				if ((this._timeslot_time != value))
				{
					this.Ontimeslot_timeChanging(value);
					this.SendPropertyChanging();
					this._timeslot_time = value;
					this.SendPropertyChanged("timeslot_time");
					this.Ontimeslot_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeSlot_Appointment", Storage="_Appointments", ThisKey="timeslot_id", OtherKey="appt_timeslot_id")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlot = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.TimeSlot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vet")]
	public partial class Vet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vet_id;
		
		private string _vet_name;
		
		private string _vet_doc;
		
		private string _vet_phone;
		
		private string _vet_email;
		
		private System.Nullable<int> _vet_room_id;
		
		private bool _vet_status;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onvet_idChanging(int value);
    partial void Onvet_idChanged();
    partial void Onvet_nameChanging(string value);
    partial void Onvet_nameChanged();
    partial void Onvet_docChanging(string value);
    partial void Onvet_docChanged();
    partial void Onvet_phoneChanging(string value);
    partial void Onvet_phoneChanged();
    partial void Onvet_emailChanging(string value);
    partial void Onvet_emailChanged();
    partial void Onvet_room_idChanging(System.Nullable<int> value);
    partial void Onvet_room_idChanged();
    partial void Onvet_statusChanging(bool value);
    partial void Onvet_statusChanged();
    #endregion
		
		public Vet()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vet_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vet_id
		{
			get
			{
				return this._vet_id;
			}
			set
			{
				if ((this._vet_id != value))
				{
					this.Onvet_idChanging(value);
					this.SendPropertyChanging();
					this._vet_id = value;
					this.SendPropertyChanged("vet_id");
					this.Onvet_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vet_name", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string vet_name
		{
			get
			{
				return this._vet_name;
			}
			set
			{
				if ((this._vet_name != value))
				{
					this.Onvet_nameChanging(value);
					this.SendPropertyChanging();
					this._vet_name = value;
					this.SendPropertyChanged("vet_name");
					this.Onvet_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vet_doc", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string vet_doc
		{
			get
			{
				return this._vet_doc;
			}
			set
			{
				if ((this._vet_doc != value))
				{
					this.Onvet_docChanging(value);
					this.SendPropertyChanging();
					this._vet_doc = value;
					this.SendPropertyChanged("vet_doc");
					this.Onvet_docChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vet_phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string vet_phone
		{
			get
			{
				return this._vet_phone;
			}
			set
			{
				if ((this._vet_phone != value))
				{
					this.Onvet_phoneChanging(value);
					this.SendPropertyChanging();
					this._vet_phone = value;
					this.SendPropertyChanged("vet_phone");
					this.Onvet_phoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vet_email", DbType="VarChar(320) NOT NULL", CanBeNull=false)]
		public string vet_email
		{
			get
			{
				return this._vet_email;
			}
			set
			{
				if ((this._vet_email != value))
				{
					this.Onvet_emailChanging(value);
					this.SendPropertyChanging();
					this._vet_email = value;
					this.SendPropertyChanged("vet_email");
					this.Onvet_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vet_room_id", DbType="Int")]
		public System.Nullable<int> vet_room_id
		{
			get
			{
				return this._vet_room_id;
			}
			set
			{
				if ((this._vet_room_id != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onvet_room_idChanging(value);
					this.SendPropertyChanging();
					this._vet_room_id = value;
					this.SendPropertyChanged("vet_room_id");
					this.Onvet_room_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vet_status", DbType="Bit NOT NULL")]
		public bool vet_status
		{
			get
			{
				return this._vet_status;
			}
			set
			{
				if ((this._vet_status != value))
				{
					this.Onvet_statusChanging(value);
					this.SendPropertyChanging();
					this._vet_status = value;
					this.SendPropertyChanged("vet_status");
					this.Onvet_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vet_Appointment", Storage="_Appointments", ThisKey="vet_id", OtherKey="appt_vet_id")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Vet", Storage="_Room", ThisKey="vet_room_id", OtherKey="room_id", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Vets.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Vets.Add(this);
						this._vet_room_id = value.room_id;
					}
					else
					{
						this._vet_room_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Vet = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Vet = null;
		}
	}
}
#pragma warning restore 1591
